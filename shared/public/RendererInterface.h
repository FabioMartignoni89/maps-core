// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#pragma once

#include <memory>
#include <optional>

class CameraInterface;
class ComputePassInterface;
class RenderPassInterface;
class RenderTargetInterface;
class RenderingContextInterface;

class RendererInterface {
public:
    virtual ~RendererInterface() = default;

    virtual void addToRenderQueue(const /*not-null*/ std::shared_ptr<RenderPassInterface> & renderPass) = 0;

    virtual void addToComputeQueue(const /*not-null*/ std::shared_ptr<ComputePassInterface> & computePass) = 0;

    /** Ensure calling on graphics thread */
    virtual void drawFrame(const /*not-null*/ std::shared_ptr<RenderingContextInterface> & renderingContext, const /*not-null*/ std::shared_ptr<CameraInterface> & camera, const /*nullable*/ std::shared_ptr<RenderTargetInterface> & target) = 0;

    /** Ensure calling on graphics thread */
    virtual void compute(const /*not-null*/ std::shared_ptr<RenderingContextInterface> & renderingContext, const /*not-null*/ std::shared_ptr<CameraInterface> & camera) = 0;
};
