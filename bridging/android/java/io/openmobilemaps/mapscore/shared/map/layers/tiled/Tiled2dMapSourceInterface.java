// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from tiled_layer.djinni

package io.openmobilemaps.mapscore.shared.map.layers.tiled;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Tiled2dMapSourceInterface {
    public abstract void onVisibleBoundsChanged(io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord visibleBounds, int curT, double zoom);

    public abstract void setMinZoomLevelIdentifier(Integer value);

    public abstract Integer getMinZoomLevelIdentifier();

    public abstract void setMaxZoomLevelIdentifier(Integer value);

    public abstract Integer getMaxZoomLevelIdentifier();

    public abstract void pause();

    public abstract void resume();

    public abstract io.openmobilemaps.mapscore.shared.map.LayerReadyState isReadyToRenderOffscreen();

    public abstract void setErrorManager(io.openmobilemaps.mapscore.shared.map.ErrorManager errorManager);

    public abstract void forceReload();

    public static final class CppProxy extends Tiled2dMapSourceInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void onVisibleBoundsChanged(io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord visibleBounds, int curT, double zoom)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onVisibleBoundsChanged(this.nativeRef, visibleBounds, curT, zoom);
        }
        private native void native_onVisibleBoundsChanged(long _nativeRef, io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord visibleBounds, int curT, double zoom);

        @Override
        public void setMinZoomLevelIdentifier(Integer value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMinZoomLevelIdentifier(this.nativeRef, value);
        }
        private native void native_setMinZoomLevelIdentifier(long _nativeRef, Integer value);

        @Override
        public Integer getMinZoomLevelIdentifier()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMinZoomLevelIdentifier(this.nativeRef);
        }
        private native Integer native_getMinZoomLevelIdentifier(long _nativeRef);

        @Override
        public void setMaxZoomLevelIdentifier(Integer value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMaxZoomLevelIdentifier(this.nativeRef, value);
        }
        private native void native_setMaxZoomLevelIdentifier(long _nativeRef, Integer value);

        @Override
        public Integer getMaxZoomLevelIdentifier()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMaxZoomLevelIdentifier(this.nativeRef);
        }
        private native Integer native_getMaxZoomLevelIdentifier(long _nativeRef);

        @Override
        public void pause()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_pause(this.nativeRef);
        }
        private native void native_pause(long _nativeRef);

        @Override
        public void resume()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_resume(this.nativeRef);
        }
        private native void native_resume(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.map.LayerReadyState isReadyToRenderOffscreen()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isReadyToRenderOffscreen(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.LayerReadyState native_isReadyToRenderOffscreen(long _nativeRef);

        @Override
        public void setErrorManager(io.openmobilemaps.mapscore.shared.map.ErrorManager errorManager)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setErrorManager(this.nativeRef, errorManager);
        }
        private native void native_setErrorManager(long _nativeRef, io.openmobilemaps.mapscore.shared.map.ErrorManager errorManager);

        @Override
        public void forceReload()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_forceReload(this.nativeRef);
        }
        private native void native_forceReload(long _nativeRef);
    }
}
