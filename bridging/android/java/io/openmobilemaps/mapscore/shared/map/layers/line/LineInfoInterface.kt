// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from line.djinni

package io.openmobilemaps.mapscore.shared.map.layers.line

import java.util.concurrent.atomic.AtomicBoolean

abstract class LineInfoInterface {

    abstract fun getIdentifier(): String

    abstract fun getCoordinates(): ArrayList<io.openmobilemaps.mapscore.shared.map.coordinates.Coord>

    abstract fun getStyle(): LineStyle

    private class CppProxy : LineInfoInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
        }

        private external fun nativeDestroy(nativeRef: Long)
        fun _djinni_private_destroy() {
            val destroyed = this.destroyed.getAndSet(true)
            if (!destroyed) nativeDestroy(this.nativeRef)
        }
        protected fun finalize() {
            _djinni_private_destroy()
        }

        override fun getIdentifier(): String {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getIdentifier(this.nativeRef)
        }
        private external fun native_getIdentifier(_nativeRef: Long): String

        override fun getCoordinates(): ArrayList<io.openmobilemaps.mapscore.shared.map.coordinates.Coord> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getCoordinates(this.nativeRef)
        }
        private external fun native_getCoordinates(_nativeRef: Long): ArrayList<io.openmobilemaps.mapscore.shared.map.coordinates.Coord>

        override fun getStyle(): LineStyle {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getStyle(this.nativeRef)
        }
        private external fun native_getStyle(_nativeRef: Long): LineStyle
    }
}
