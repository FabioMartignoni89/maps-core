// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from coordinate_system.djinni

package io.openmobilemaps.mapscore.shared.map.coordinates;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class CoordinateConversionHelperInterface {
    public abstract void registerConverter(CoordinateConverterInterface converter);

    public abstract Coord convert(String to, Coord coordinate);

    public abstract RectCoord convertRect(String to, RectCoord rect);

    public abstract RectCoord convertRectToRenderSystem(RectCoord rect);

    public abstract QuadCoord convertQuad(String to, QuadCoord quad);

    public abstract QuadCoord convertQuadToRenderSystem(QuadCoord quad);

    public abstract Coord convertToRenderSystem(Coord coordinate);

    /**
     * This instance is independent of the map and does not know about the rendering system.
     * It can not be used to convert coordinates into rendering space.
     */
    public static native CoordinateConversionHelperInterface independentInstance();

    public static final class CppProxy extends CoordinateConversionHelperInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void registerConverter(CoordinateConverterInterface converter)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_registerConverter(this.nativeRef, converter);
        }
        private native void native_registerConverter(long _nativeRef, CoordinateConverterInterface converter);

        @Override
        public Coord convert(String to, Coord coordinate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_convert(this.nativeRef, to, coordinate);
        }
        private native Coord native_convert(long _nativeRef, String to, Coord coordinate);

        @Override
        public RectCoord convertRect(String to, RectCoord rect)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_convertRect(this.nativeRef, to, rect);
        }
        private native RectCoord native_convertRect(long _nativeRef, String to, RectCoord rect);

        @Override
        public RectCoord convertRectToRenderSystem(RectCoord rect)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_convertRectToRenderSystem(this.nativeRef, rect);
        }
        private native RectCoord native_convertRectToRenderSystem(long _nativeRef, RectCoord rect);

        @Override
        public QuadCoord convertQuad(String to, QuadCoord quad)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_convertQuad(this.nativeRef, to, quad);
        }
        private native QuadCoord native_convertQuad(long _nativeRef, String to, QuadCoord quad);

        @Override
        public QuadCoord convertQuadToRenderSystem(QuadCoord quad)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_convertQuadToRenderSystem(this.nativeRef, quad);
        }
        private native QuadCoord native_convertQuadToRenderSystem(long _nativeRef, QuadCoord quad);

        @Override
        public Coord convertToRenderSystem(Coord coordinate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_convertToRenderSystem(this.nativeRef, coordinate);
        }
        private native Coord native_convertToRenderSystem(long _nativeRef, Coord coordinate);
    }
}
