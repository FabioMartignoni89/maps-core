// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from touch_handler.djinni

package io.openmobilemaps.mapscore.shared.map.controls;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class TouchHandlerInterface {
    public abstract void onTouchEvent(TouchEvent touchEvent);

    public abstract void insertListener(TouchInterface listener, int index);

    public abstract void addListener(TouchInterface listener);

    public abstract void removeListener(TouchInterface listener);

    public static final class CppProxy extends TouchHandlerInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void onTouchEvent(TouchEvent touchEvent)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onTouchEvent(this.nativeRef, touchEvent);
        }
        private native void native_onTouchEvent(long _nativeRef, TouchEvent touchEvent);

        @Override
        public void insertListener(TouchInterface listener, int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_insertListener(this.nativeRef, listener, index);
        }
        private native void native_insertListener(long _nativeRef, TouchInterface listener, int index);

        @Override
        public void addListener(TouchInterface listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addListener(this.nativeRef, listener);
        }
        private native void native_addListener(long _nativeRef, TouchInterface listener);

        @Override
        public void removeListener(TouchInterface listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeListener(this.nativeRef, listener);
        }
        private native void native_removeListener(long _nativeRef, TouchInterface listener);
    }
}
