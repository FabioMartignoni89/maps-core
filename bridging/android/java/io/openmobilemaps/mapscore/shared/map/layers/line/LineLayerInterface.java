// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from line.djinni

package io.openmobilemaps.mapscore.shared.map.layers.line;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class LineLayerInterface {
    public abstract void setLines(ArrayList<LineInfoInterface> lines);

    public abstract ArrayList<LineInfoInterface> getLines();

    public abstract void remove(LineInfoInterface line);

    public abstract void add(LineInfoInterface line);

    public abstract void clear();

    public abstract void setCallbackHandler(LineLayerCallbackInterface handler);

    public abstract io.openmobilemaps.mapscore.shared.map.LayerInterface asLayerInterface();

    public abstract void invalidate();

    public abstract void resetSelection();

    public abstract void setSelected(HashSet<String> selectedIds);

    public abstract void setLayerClickable(boolean isLayerClickable);

    public static native LineLayerInterface create();

    public static final class CppProxy extends LineLayerInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void setLines(ArrayList<LineInfoInterface> lines)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLines(this.nativeRef, lines);
        }
        private native void native_setLines(long _nativeRef, ArrayList<LineInfoInterface> lines);

        @Override
        public ArrayList<LineInfoInterface> getLines()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLines(this.nativeRef);
        }
        private native ArrayList<LineInfoInterface> native_getLines(long _nativeRef);

        @Override
        public void remove(LineInfoInterface line)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_remove(this.nativeRef, line);
        }
        private native void native_remove(long _nativeRef, LineInfoInterface line);

        @Override
        public void add(LineInfoInterface line)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_add(this.nativeRef, line);
        }
        private native void native_add(long _nativeRef, LineInfoInterface line);

        @Override
        public void clear()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clear(this.nativeRef);
        }
        private native void native_clear(long _nativeRef);

        @Override
        public void setCallbackHandler(LineLayerCallbackInterface handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallbackHandler(this.nativeRef, handler);
        }
        private native void native_setCallbackHandler(long _nativeRef, LineLayerCallbackInterface handler);

        @Override
        public io.openmobilemaps.mapscore.shared.map.LayerInterface asLayerInterface()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asLayerInterface(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.LayerInterface native_asLayerInterface(long _nativeRef);

        @Override
        public void invalidate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_invalidate(this.nativeRef);
        }
        private native void native_invalidate(long _nativeRef);

        @Override
        public void resetSelection()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_resetSelection(this.nativeRef);
        }
        private native void native_resetSelection(long _nativeRef);

        @Override
        public void setSelected(HashSet<String> selectedIds)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSelected(this.nativeRef, selectedIds);
        }
        private native void native_setSelected(long _nativeRef, HashSet<String> selectedIds);

        @Override
        public void setLayerClickable(boolean isLayerClickable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLayerClickable(this.nativeRef, isLayerClickable);
        }
        private native void native_setLayerClickable(long _nativeRef, boolean isLayerClickable);
    }
}
