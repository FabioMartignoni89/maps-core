// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from task_scheduler.djinni

package io.openmobilemaps.mapscore.shared.map.scheduling;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ThreadPoolCallbacks {
    public abstract String getCurrentThreadName();

    public abstract void setCurrentThreadName(String name);

    public abstract void setThreadPriority(TaskPriority priority);

    public abstract void attachThread();

    public abstract void detachThread();

    public static final class CppProxy extends ThreadPoolCallbacks
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public String getCurrentThreadName()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCurrentThreadName(this.nativeRef);
        }
        private native String native_getCurrentThreadName(long _nativeRef);

        @Override
        public void setCurrentThreadName(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCurrentThreadName(this.nativeRef, name);
        }
        private native void native_setCurrentThreadName(long _nativeRef, String name);

        @Override
        public void setThreadPriority(TaskPriority priority)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setThreadPriority(this.nativeRef, priority);
        }
        private native void native_setThreadPriority(long _nativeRef, TaskPriority priority);

        @Override
        public void attachThread()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_attachThread(this.nativeRef);
        }
        private native void native_attachThread(long _nativeRef);

        @Override
        public void detachThread()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_detachThread(this.nativeRef);
        }
        private native void native_detachThread(long _nativeRef);
    }
}
