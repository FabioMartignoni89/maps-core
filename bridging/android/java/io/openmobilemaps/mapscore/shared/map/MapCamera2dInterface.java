// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.map;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MapCamera2dInterface {
    public abstract void freeze(boolean freeze);

    public abstract void moveToCenterPositionZoom(io.openmobilemaps.mapscore.shared.map.coordinates.Coord centerPosition, double zoom, boolean animated);

    public abstract void moveToCenterPosition(io.openmobilemaps.mapscore.shared.map.coordinates.Coord centerPosition, boolean animated);

    public abstract void moveToBoundingBox(io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord boundingBox, float paddingPc, boolean animated, Double maxZoom);

    public abstract io.openmobilemaps.mapscore.shared.map.coordinates.Coord getCenterPosition();

    public abstract void setZoom(double zoom, boolean animated);

    public abstract double getZoom();

    public abstract void setRotation(float angle, boolean animated);

    public abstract float getRotation();

    public abstract void setMinZoom(double minZoom);

    public abstract void setMaxZoom(double maxZoom);

    public abstract double getMinZoom();

    public abstract double getMaxZoom();

    public abstract void setBounds(io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord bounds);

    public abstract io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord getBounds();

    public abstract boolean isInBounds(io.openmobilemaps.mapscore.shared.map.coordinates.Coord coords);

    public abstract void setPaddingLeft(float padding);

    public abstract void setPaddingRight(float padding);

    public abstract void setPaddingTop(float padding);

    public abstract void setPaddingBottom(float padding);

    public abstract io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord getVisibleRect();

    public abstract io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord getPaddingAdjustedVisibleRect();

    public abstract float getScreenDensityPpi();

    /** this method is called just before the update methods on all layers */
    public abstract void update();

    public abstract ArrayList<Float> getInvariantModelMatrix(io.openmobilemaps.mapscore.shared.map.coordinates.Coord coordinate, boolean scaleInvariant, boolean rotationInvariant);

    public abstract void addListener(io.openmobilemaps.mapscore.shared.map.camera.MapCamera2dListenerInterface listener);

    public abstract void removeListener(io.openmobilemaps.mapscore.shared.map.camera.MapCamera2dListenerInterface listener);

    public abstract io.openmobilemaps.mapscore.shared.map.coordinates.Coord coordFromScreenPosition(io.openmobilemaps.mapscore.shared.graphics.common.Vec2F posScreen);

    public abstract double mapUnitsFromPixels(double distancePx);

    public abstract void setRotationEnabled(boolean enabled);

    public abstract void setSnapToNorthEnabled(boolean enabled);

    public abstract io.openmobilemaps.mapscore.shared.graphics.CameraInterface asCameraInterface();

    public abstract io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord getLastVpMatrixViewBounds();

    public abstract Float getLastVpMatrixRotation();

    public abstract Float getLastVpMatrixZoom();

    public static native MapCamera2dInterface create(MapInterface mapInterface, float screenDensityPpi);

    public static final class CppProxy extends MapCamera2dInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void freeze(boolean freeze)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_freeze(this.nativeRef, freeze);
        }
        private native void native_freeze(long _nativeRef, boolean freeze);

        @Override
        public void moveToCenterPositionZoom(io.openmobilemaps.mapscore.shared.map.coordinates.Coord centerPosition, double zoom, boolean animated)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_moveToCenterPositionZoom(this.nativeRef, centerPosition, zoom, animated);
        }
        private native void native_moveToCenterPositionZoom(long _nativeRef, io.openmobilemaps.mapscore.shared.map.coordinates.Coord centerPosition, double zoom, boolean animated);

        @Override
        public void moveToCenterPosition(io.openmobilemaps.mapscore.shared.map.coordinates.Coord centerPosition, boolean animated)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_moveToCenterPosition(this.nativeRef, centerPosition, animated);
        }
        private native void native_moveToCenterPosition(long _nativeRef, io.openmobilemaps.mapscore.shared.map.coordinates.Coord centerPosition, boolean animated);

        @Override
        public void moveToBoundingBox(io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord boundingBox, float paddingPc, boolean animated, Double maxZoom)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_moveToBoundingBox(this.nativeRef, boundingBox, paddingPc, animated, maxZoom);
        }
        private native void native_moveToBoundingBox(long _nativeRef, io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord boundingBox, float paddingPc, boolean animated, Double maxZoom);

        @Override
        public io.openmobilemaps.mapscore.shared.map.coordinates.Coord getCenterPosition()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCenterPosition(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.coordinates.Coord native_getCenterPosition(long _nativeRef);

        @Override
        public void setZoom(double zoom, boolean animated)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setZoom(this.nativeRef, zoom, animated);
        }
        private native void native_setZoom(long _nativeRef, double zoom, boolean animated);

        @Override
        public double getZoom()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getZoom(this.nativeRef);
        }
        private native double native_getZoom(long _nativeRef);

        @Override
        public void setRotation(float angle, boolean animated)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRotation(this.nativeRef, angle, animated);
        }
        private native void native_setRotation(long _nativeRef, float angle, boolean animated);

        @Override
        public float getRotation()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRotation(this.nativeRef);
        }
        private native float native_getRotation(long _nativeRef);

        @Override
        public void setMinZoom(double minZoom)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMinZoom(this.nativeRef, minZoom);
        }
        private native void native_setMinZoom(long _nativeRef, double minZoom);

        @Override
        public void setMaxZoom(double maxZoom)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMaxZoom(this.nativeRef, maxZoom);
        }
        private native void native_setMaxZoom(long _nativeRef, double maxZoom);

        @Override
        public double getMinZoom()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMinZoom(this.nativeRef);
        }
        private native double native_getMinZoom(long _nativeRef);

        @Override
        public double getMaxZoom()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMaxZoom(this.nativeRef);
        }
        private native double native_getMaxZoom(long _nativeRef);

        @Override
        public void setBounds(io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord bounds)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBounds(this.nativeRef, bounds);
        }
        private native void native_setBounds(long _nativeRef, io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord bounds);

        @Override
        public io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord getBounds()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBounds(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord native_getBounds(long _nativeRef);

        @Override
        public boolean isInBounds(io.openmobilemaps.mapscore.shared.map.coordinates.Coord coords)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInBounds(this.nativeRef, coords);
        }
        private native boolean native_isInBounds(long _nativeRef, io.openmobilemaps.mapscore.shared.map.coordinates.Coord coords);

        @Override
        public void setPaddingLeft(float padding)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaddingLeft(this.nativeRef, padding);
        }
        private native void native_setPaddingLeft(long _nativeRef, float padding);

        @Override
        public void setPaddingRight(float padding)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaddingRight(this.nativeRef, padding);
        }
        private native void native_setPaddingRight(long _nativeRef, float padding);

        @Override
        public void setPaddingTop(float padding)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaddingTop(this.nativeRef, padding);
        }
        private native void native_setPaddingTop(long _nativeRef, float padding);

        @Override
        public void setPaddingBottom(float padding)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaddingBottom(this.nativeRef, padding);
        }
        private native void native_setPaddingBottom(long _nativeRef, float padding);

        @Override
        public io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord getVisibleRect()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getVisibleRect(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord native_getVisibleRect(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord getPaddingAdjustedVisibleRect()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPaddingAdjustedVisibleRect(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord native_getPaddingAdjustedVisibleRect(long _nativeRef);

        @Override
        public float getScreenDensityPpi()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getScreenDensityPpi(this.nativeRef);
        }
        private native float native_getScreenDensityPpi(long _nativeRef);

        @Override
        public void update()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_update(this.nativeRef);
        }
        private native void native_update(long _nativeRef);

        @Override
        public ArrayList<Float> getInvariantModelMatrix(io.openmobilemaps.mapscore.shared.map.coordinates.Coord coordinate, boolean scaleInvariant, boolean rotationInvariant)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInvariantModelMatrix(this.nativeRef, coordinate, scaleInvariant, rotationInvariant);
        }
        private native ArrayList<Float> native_getInvariantModelMatrix(long _nativeRef, io.openmobilemaps.mapscore.shared.map.coordinates.Coord coordinate, boolean scaleInvariant, boolean rotationInvariant);

        @Override
        public void addListener(io.openmobilemaps.mapscore.shared.map.camera.MapCamera2dListenerInterface listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addListener(this.nativeRef, listener);
        }
        private native void native_addListener(long _nativeRef, io.openmobilemaps.mapscore.shared.map.camera.MapCamera2dListenerInterface listener);

        @Override
        public void removeListener(io.openmobilemaps.mapscore.shared.map.camera.MapCamera2dListenerInterface listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeListener(this.nativeRef, listener);
        }
        private native void native_removeListener(long _nativeRef, io.openmobilemaps.mapscore.shared.map.camera.MapCamera2dListenerInterface listener);

        @Override
        public io.openmobilemaps.mapscore.shared.map.coordinates.Coord coordFromScreenPosition(io.openmobilemaps.mapscore.shared.graphics.common.Vec2F posScreen)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_coordFromScreenPosition(this.nativeRef, posScreen);
        }
        private native io.openmobilemaps.mapscore.shared.map.coordinates.Coord native_coordFromScreenPosition(long _nativeRef, io.openmobilemaps.mapscore.shared.graphics.common.Vec2F posScreen);

        @Override
        public double mapUnitsFromPixels(double distancePx)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_mapUnitsFromPixels(this.nativeRef, distancePx);
        }
        private native double native_mapUnitsFromPixels(long _nativeRef, double distancePx);

        @Override
        public void setRotationEnabled(boolean enabled)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRotationEnabled(this.nativeRef, enabled);
        }
        private native void native_setRotationEnabled(long _nativeRef, boolean enabled);

        @Override
        public void setSnapToNorthEnabled(boolean enabled)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSnapToNorthEnabled(this.nativeRef, enabled);
        }
        private native void native_setSnapToNorthEnabled(long _nativeRef, boolean enabled);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.CameraInterface asCameraInterface()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asCameraInterface(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.CameraInterface native_asCameraInterface(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord getLastVpMatrixViewBounds()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLastVpMatrixViewBounds(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord native_getLastVpMatrixViewBounds(long _nativeRef);

        @Override
        public Float getLastVpMatrixRotation()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLastVpMatrixRotation(this.nativeRef);
        }
        private native Float native_getLastVpMatrixRotation(long _nativeRef);

        @Override
        public Float getLastVpMatrixZoom()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLastVpMatrixZoom(this.nativeRef);
        }
        private native Float native_getLastVpMatrixZoom(long _nativeRef);
    }
}
