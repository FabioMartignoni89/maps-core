// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from tiled_raster_layer.djinni

package io.openmobilemaps.mapscore.shared.map.layers.tiled.raster;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Tiled2dMapRasterLayerInterface {
    public abstract io.openmobilemaps.mapscore.shared.map.LayerInterface asLayerInterface();

    public abstract void setCallbackHandler(Tiled2dMapRasterLayerCallbackInterface handler);

    public abstract Tiled2dMapRasterLayerCallbackInterface getCallbackHandler();

    public abstract void removeCallbackHandler();

    public abstract void setAlpha(float alpha);

    public abstract float getAlpha();

    public abstract void setMinZoomLevelIdentifier(Integer value);

    public abstract Integer getMinZoomLevelIdentifier();

    public abstract void setMaxZoomLevelIdentifier(Integer value);

    public abstract Integer getMaxZoomLevelIdentifier();

    public abstract void setT(int t);

    public abstract io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig getConfig();

    /** the loaders are tried in their respective order, if the first loader returns the error code NOOP the second will be tried and so on */
    public static native Tiled2dMapRasterLayerInterface createWithMask(io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig layerConfig, ArrayList<io.openmobilemaps.mapscore.shared.map.loader.LoaderInterface> loaders, io.openmobilemaps.mapscore.shared.graphics.objects.MaskingObjectInterface mask);

    /** the loaders are tried in their respective order, if the first loader returns the error code NOOP the second will be tried and so on */
    public static native Tiled2dMapRasterLayerInterface createWithShader(io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig layerConfig, ArrayList<io.openmobilemaps.mapscore.shared.map.loader.LoaderInterface> loaders, io.openmobilemaps.mapscore.shared.graphics.shader.ShaderProgramInterface shader);

    /** the loaders are tried in their respective order, if the first loader returns the error code NOOP the second will be tried and so on */
    public static native Tiled2dMapRasterLayerInterface create(io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig layerConfig, ArrayList<io.openmobilemaps.mapscore.shared.map.loader.LoaderInterface> loaders);

    public static final class CppProxy extends Tiled2dMapRasterLayerInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.map.LayerInterface asLayerInterface()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asLayerInterface(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.LayerInterface native_asLayerInterface(long _nativeRef);

        @Override
        public void setCallbackHandler(Tiled2dMapRasterLayerCallbackInterface handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallbackHandler(this.nativeRef, handler);
        }
        private native void native_setCallbackHandler(long _nativeRef, Tiled2dMapRasterLayerCallbackInterface handler);

        @Override
        public Tiled2dMapRasterLayerCallbackInterface getCallbackHandler()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCallbackHandler(this.nativeRef);
        }
        private native Tiled2dMapRasterLayerCallbackInterface native_getCallbackHandler(long _nativeRef);

        @Override
        public void removeCallbackHandler()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeCallbackHandler(this.nativeRef);
        }
        private native void native_removeCallbackHandler(long _nativeRef);

        @Override
        public void setAlpha(float alpha)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAlpha(this.nativeRef, alpha);
        }
        private native void native_setAlpha(long _nativeRef, float alpha);

        @Override
        public float getAlpha()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAlpha(this.nativeRef);
        }
        private native float native_getAlpha(long _nativeRef);

        @Override
        public void setMinZoomLevelIdentifier(Integer value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMinZoomLevelIdentifier(this.nativeRef, value);
        }
        private native void native_setMinZoomLevelIdentifier(long _nativeRef, Integer value);

        @Override
        public Integer getMinZoomLevelIdentifier()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMinZoomLevelIdentifier(this.nativeRef);
        }
        private native Integer native_getMinZoomLevelIdentifier(long _nativeRef);

        @Override
        public void setMaxZoomLevelIdentifier(Integer value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMaxZoomLevelIdentifier(this.nativeRef, value);
        }
        private native void native_setMaxZoomLevelIdentifier(long _nativeRef, Integer value);

        @Override
        public Integer getMaxZoomLevelIdentifier()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMaxZoomLevelIdentifier(this.nativeRef);
        }
        private native Integer native_getMaxZoomLevelIdentifier(long _nativeRef);

        @Override
        public void setT(int t)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setT(this.nativeRef, t);
        }
        private native void native_setT(long _nativeRef, int t);

        @Override
        public io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig getConfig()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getConfig(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig native_getConfig(long _nativeRef);
    }
}
