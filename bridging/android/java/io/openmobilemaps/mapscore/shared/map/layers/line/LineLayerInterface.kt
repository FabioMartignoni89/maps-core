// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from line.djinni

package io.openmobilemaps.mapscore.shared.map.layers.line

import java.util.concurrent.atomic.AtomicBoolean

abstract class LineLayerInterface {

    abstract fun setLines(lines: ArrayList<LineInfoInterface>)

    abstract fun getLines(): ArrayList<LineInfoInterface>

    abstract fun remove(line: LineInfoInterface)

    abstract fun add(line: LineInfoInterface)

    abstract fun clear()

    abstract fun setCallbackHandler(handler: LineLayerCallbackInterface)

    abstract fun asLayerInterface(): io.openmobilemaps.mapscore.shared.map.LayerInterface

    abstract fun invalidate()

    companion object {
        @JvmStatic
        fun create(): LineLayerInterface {
            return CppProxy.create()
        }
    }

    private class CppProxy : LineLayerInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
        }

        private external fun nativeDestroy(nativeRef: Long)
        fun _djinni_private_destroy() {
            val destroyed = this.destroyed.getAndSet(true)
            if (!destroyed) nativeDestroy(this.nativeRef)
        }
        protected fun finalize() {
            _djinni_private_destroy()
        }

        override fun setLines(lines: ArrayList<LineInfoInterface>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setLines(this.nativeRef, lines)
        }
        private external fun native_setLines(_nativeRef: Long, lines: ArrayList<LineInfoInterface>)

        override fun getLines(): ArrayList<LineInfoInterface> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getLines(this.nativeRef)
        }
        private external fun native_getLines(_nativeRef: Long): ArrayList<LineInfoInterface>

        override fun remove(line: LineInfoInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_remove(this.nativeRef, line)
        }
        private external fun native_remove(_nativeRef: Long, line: LineInfoInterface)

        override fun add(line: LineInfoInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_add(this.nativeRef, line)
        }
        private external fun native_add(_nativeRef: Long, line: LineInfoInterface)

        override fun clear() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_clear(this.nativeRef)
        }
        private external fun native_clear(_nativeRef: Long)

        override fun setCallbackHandler(handler: LineLayerCallbackInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setCallbackHandler(this.nativeRef, handler)
        }
        private external fun native_setCallbackHandler(_nativeRef: Long, handler: LineLayerCallbackInterface)

        override fun asLayerInterface(): io.openmobilemaps.mapscore.shared.map.LayerInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asLayerInterface(this.nativeRef)
        }
        private external fun native_asLayerInterface(_nativeRef: Long): io.openmobilemaps.mapscore.shared.map.LayerInterface

        override fun invalidate() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_invalidate(this.nativeRef)
        }
        private external fun native_invalidate(_nativeRef: Long)

        companion object {
            @JvmStatic
            external fun create(): LineLayerInterface
        }
    }
}
