// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.map

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class MapCamera3dInterface {

    abstract fun setCameraMode(mode: CameraMode3d)

    abstract fun getCameraMode(): CameraMode3d

    abstract fun setCameraConfig(config: Camera3dConfig)

    abstract fun getCameraConfig(): Camera3dConfig

    private class CppProxy : MapCamera3dInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun setCameraMode(mode: CameraMode3d) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setCameraMode(this.nativeRef, mode)
        }
        private external fun native_setCameraMode(_nativeRef: Long, mode: CameraMode3d)

        override fun getCameraMode(): CameraMode3d {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getCameraMode(this.nativeRef)
        }
        private external fun native_getCameraMode(_nativeRef: Long): CameraMode3d

        override fun setCameraConfig(config: Camera3dConfig) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setCameraConfig(this.nativeRef, config)
        }
        private external fun native_setCameraConfig(_nativeRef: Long, config: Camera3dConfig)

        override fun getCameraConfig(): Camera3dConfig {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getCameraConfig(this.nativeRef)
        }
        private external fun native_getCameraConfig(_nativeRef: Long): Camera3dConfig
    }
}
