// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from polygon.djinni

package io.openmobilemaps.mapscore.shared.map.layers.polygon;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class PolygonLayerInterface {
    public abstract void setPolygons(ArrayList<PolygonInfo> polygons);

    public abstract ArrayList<PolygonInfo> getPolygons();

    public abstract void remove(PolygonInfo polygon);

    public abstract void add(PolygonInfo polygon);

    public abstract void addAll(ArrayList<PolygonInfo> polygons);

    public abstract void clear();

    public abstract void setCallbackHandler(PolygonLayerCallbackInterface handler);

    public abstract io.openmobilemaps.mapscore.shared.map.LayerInterface asLayerInterface();

    public abstract void resetSelection();

    public abstract void setLayerClickable(boolean isLayerClickable);

    public static native PolygonLayerInterface create();

    public static final class CppProxy extends PolygonLayerInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void setPolygons(ArrayList<PolygonInfo> polygons)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPolygons(this.nativeRef, polygons);
        }
        private native void native_setPolygons(long _nativeRef, ArrayList<PolygonInfo> polygons);

        @Override
        public ArrayList<PolygonInfo> getPolygons()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPolygons(this.nativeRef);
        }
        private native ArrayList<PolygonInfo> native_getPolygons(long _nativeRef);

        @Override
        public void remove(PolygonInfo polygon)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_remove(this.nativeRef, polygon);
        }
        private native void native_remove(long _nativeRef, PolygonInfo polygon);

        @Override
        public void add(PolygonInfo polygon)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_add(this.nativeRef, polygon);
        }
        private native void native_add(long _nativeRef, PolygonInfo polygon);

        @Override
        public void addAll(ArrayList<PolygonInfo> polygons)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addAll(this.nativeRef, polygons);
        }
        private native void native_addAll(long _nativeRef, ArrayList<PolygonInfo> polygons);

        @Override
        public void clear()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clear(this.nativeRef);
        }
        private native void native_clear(long _nativeRef);

        @Override
        public void setCallbackHandler(PolygonLayerCallbackInterface handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallbackHandler(this.nativeRef, handler);
        }
        private native void native_setCallbackHandler(long _nativeRef, PolygonLayerCallbackInterface handler);

        @Override
        public io.openmobilemaps.mapscore.shared.map.LayerInterface asLayerInterface()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asLayerInterface(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.LayerInterface native_asLayerInterface(long _nativeRef);

        @Override
        public void resetSelection()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_resetSelection(this.nativeRef);
        }
        private native void native_resetSelection(long _nativeRef);

        @Override
        public void setLayerClickable(boolean isLayerClickable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLayerClickable(this.nativeRef, isLayerClickable);
        }
        private native void native_setLayerClickable(long _nativeRef, boolean isLayerClickable);
    }
}
