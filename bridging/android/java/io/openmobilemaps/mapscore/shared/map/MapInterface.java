// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.map;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MapInterface {
    public abstract void setCallbackHandler(MapCallbackInterface callbackInterface);

    public abstract io.openmobilemaps.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface getGraphicsObjectFactory();

    public abstract io.openmobilemaps.mapscore.shared.graphics.shader.ShaderFactoryInterface getShaderFactory();

    public abstract io.openmobilemaps.mapscore.shared.map.scheduling.SchedulerInterface getScheduler();

    public abstract io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface getRenderingContext();

    public abstract MapConfig getMapConfig();

    public abstract io.openmobilemaps.mapscore.shared.map.coordinates.CoordinateConversionHelperInterface getCoordinateConverterHelper();

    public abstract void setCamera(MapCamera2dInterface camera);

    public abstract MapCamera2dInterface getCamera();

    public abstract void setTouchHandler(io.openmobilemaps.mapscore.shared.map.controls.TouchHandlerInterface touchHandler);

    public abstract io.openmobilemaps.mapscore.shared.map.controls.TouchHandlerInterface getTouchHandler();

    public abstract ArrayList<LayerInterface> getLayers();

    public abstract void addLayer(LayerInterface layer);

    public abstract void insertLayerAt(LayerInterface layer, int atIndex);

    public abstract void insertLayerAbove(LayerInterface layer, LayerInterface above);

    public abstract void insertLayerBelow(LayerInterface layer, LayerInterface below);

    public abstract void removeLayer(LayerInterface layer);

    public abstract void setViewportSize(io.openmobilemaps.mapscore.shared.graphics.common.Vec2I size);

    public abstract void setBackgroundColor(io.openmobilemaps.mapscore.shared.graphics.common.Color color);

    public abstract void invalidate();

    public abstract void drawFrame();

    public abstract void resume();

    public abstract void pause();

    /**
     * changes bounds to bounds, checks all layers for readiness, and updates callbacks, timeout in
     * seconds, always draw the frame when state is updated in the ready callbacks
     */
    public abstract void drawReadyFrame(io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord bounds, float timeout, MapReadyCallbackInterface callbacks);

    public abstract void forceReload();

    public static native MapInterface create(io.openmobilemaps.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface graphicsFactory, io.openmobilemaps.mapscore.shared.graphics.shader.ShaderFactoryInterface shaderFactory, io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface renderingContext, MapConfig mapConfig, io.openmobilemaps.mapscore.shared.map.scheduling.SchedulerInterface scheduler, float pixelDensity);

    public static native MapInterface createWithOpenGl(MapConfig mapConfig, float pixelDensity);

    public static final class CppProxy extends MapInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void setCallbackHandler(MapCallbackInterface callbackInterface)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallbackHandler(this.nativeRef, callbackInterface);
        }
        private native void native_setCallbackHandler(long _nativeRef, MapCallbackInterface callbackInterface);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface getGraphicsObjectFactory()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getGraphicsObjectFactory(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface native_getGraphicsObjectFactory(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.shader.ShaderFactoryInterface getShaderFactory()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getShaderFactory(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.shader.ShaderFactoryInterface native_getShaderFactory(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.map.scheduling.SchedulerInterface getScheduler()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getScheduler(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.scheduling.SchedulerInterface native_getScheduler(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface getRenderingContext()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRenderingContext(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface native_getRenderingContext(long _nativeRef);

        @Override
        public MapConfig getMapConfig()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMapConfig(this.nativeRef);
        }
        private native MapConfig native_getMapConfig(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.map.coordinates.CoordinateConversionHelperInterface getCoordinateConverterHelper()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCoordinateConverterHelper(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.coordinates.CoordinateConversionHelperInterface native_getCoordinateConverterHelper(long _nativeRef);

        @Override
        public void setCamera(MapCamera2dInterface camera)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCamera(this.nativeRef, camera);
        }
        private native void native_setCamera(long _nativeRef, MapCamera2dInterface camera);

        @Override
        public MapCamera2dInterface getCamera()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCamera(this.nativeRef);
        }
        private native MapCamera2dInterface native_getCamera(long _nativeRef);

        @Override
        public void setTouchHandler(io.openmobilemaps.mapscore.shared.map.controls.TouchHandlerInterface touchHandler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTouchHandler(this.nativeRef, touchHandler);
        }
        private native void native_setTouchHandler(long _nativeRef, io.openmobilemaps.mapscore.shared.map.controls.TouchHandlerInterface touchHandler);

        @Override
        public io.openmobilemaps.mapscore.shared.map.controls.TouchHandlerInterface getTouchHandler()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTouchHandler(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.controls.TouchHandlerInterface native_getTouchHandler(long _nativeRef);

        @Override
        public ArrayList<LayerInterface> getLayers()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLayers(this.nativeRef);
        }
        private native ArrayList<LayerInterface> native_getLayers(long _nativeRef);

        @Override
        public void addLayer(LayerInterface layer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addLayer(this.nativeRef, layer);
        }
        private native void native_addLayer(long _nativeRef, LayerInterface layer);

        @Override
        public void insertLayerAt(LayerInterface layer, int atIndex)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_insertLayerAt(this.nativeRef, layer, atIndex);
        }
        private native void native_insertLayerAt(long _nativeRef, LayerInterface layer, int atIndex);

        @Override
        public void insertLayerAbove(LayerInterface layer, LayerInterface above)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_insertLayerAbove(this.nativeRef, layer, above);
        }
        private native void native_insertLayerAbove(long _nativeRef, LayerInterface layer, LayerInterface above);

        @Override
        public void insertLayerBelow(LayerInterface layer, LayerInterface below)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_insertLayerBelow(this.nativeRef, layer, below);
        }
        private native void native_insertLayerBelow(long _nativeRef, LayerInterface layer, LayerInterface below);

        @Override
        public void removeLayer(LayerInterface layer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeLayer(this.nativeRef, layer);
        }
        private native void native_removeLayer(long _nativeRef, LayerInterface layer);

        @Override
        public void setViewportSize(io.openmobilemaps.mapscore.shared.graphics.common.Vec2I size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setViewportSize(this.nativeRef, size);
        }
        private native void native_setViewportSize(long _nativeRef, io.openmobilemaps.mapscore.shared.graphics.common.Vec2I size);

        @Override
        public void setBackgroundColor(io.openmobilemaps.mapscore.shared.graphics.common.Color color)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBackgroundColor(this.nativeRef, color);
        }
        private native void native_setBackgroundColor(long _nativeRef, io.openmobilemaps.mapscore.shared.graphics.common.Color color);

        @Override
        public void invalidate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_invalidate(this.nativeRef);
        }
        private native void native_invalidate(long _nativeRef);

        @Override
        public void drawFrame()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawFrame(this.nativeRef);
        }
        private native void native_drawFrame(long _nativeRef);

        @Override
        public void resume()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_resume(this.nativeRef);
        }
        private native void native_resume(long _nativeRef);

        @Override
        public void pause()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_pause(this.nativeRef);
        }
        private native void native_pause(long _nativeRef);

        @Override
        public void drawReadyFrame(io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord bounds, float timeout, MapReadyCallbackInterface callbacks)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawReadyFrame(this.nativeRef, bounds, timeout, callbacks);
        }
        private native void native_drawReadyFrame(long _nativeRef, io.openmobilemaps.mapscore.shared.map.coordinates.RectCoord bounds, float timeout, MapReadyCallbackInterface callbacks);

        @Override
        public void forceReload()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_forceReload(this.nativeRef);
        }
        private native void native_forceReload(long _nativeRef);
    }
}
