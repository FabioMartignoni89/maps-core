// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from error_manager.djinni

package io.openmobilemaps.mapscore.shared.map;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ErrorManager {
    public abstract void addTiledLayerError(TiledLayerError error);

    public abstract void removeError(String url);

    public abstract void removeAllErrorsForLayer(String layerName);

    public abstract void clearAllErrors();

    public abstract void addErrorListener(ErrorManagerListener listener);

    public abstract void removeErrorListener(ErrorManagerListener listener);

    public static native ErrorManager create();

    public static final class CppProxy extends ErrorManager
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void addTiledLayerError(TiledLayerError error)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addTiledLayerError(this.nativeRef, error);
        }
        private native void native_addTiledLayerError(long _nativeRef, TiledLayerError error);

        @Override
        public void removeError(String url)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeError(this.nativeRef, url);
        }
        private native void native_removeError(long _nativeRef, String url);

        @Override
        public void removeAllErrorsForLayer(String layerName)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeAllErrorsForLayer(this.nativeRef, layerName);
        }
        private native void native_removeAllErrorsForLayer(long _nativeRef, String layerName);

        @Override
        public void clearAllErrors()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clearAllErrors(this.nativeRef);
        }
        private native void native_clearAllErrors(long _nativeRef);

        @Override
        public void addErrorListener(ErrorManagerListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addErrorListener(this.nativeRef, listener);
        }
        private native void native_addErrorListener(long _nativeRef, ErrorManagerListener listener);

        @Override
        public void removeErrorListener(ErrorManagerListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeErrorListener(this.nativeRef, listener);
        }
        private native void native_removeErrorListener(long _nativeRef, ErrorManagerListener listener);
    }
}
