// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from icon.djinni

package io.openmobilemaps.mapscore.shared.map.layers.icon;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class IconLayerInterface {
    public abstract void setIcons(ArrayList<IconInfoInterface> icons);

    public abstract ArrayList<IconInfoInterface> getIcons();

    public abstract void remove(IconInfoInterface icon);

    public abstract void add(IconInfoInterface icon);

    public abstract void clear();

    public abstract void setCallbackHandler(IconLayerCallbackInterface handler);

    public abstract io.openmobilemaps.mapscore.shared.map.LayerInterface asLayerInterface();

    public abstract void invalidate();

    public abstract void setLayerClickable(boolean isLayerClickable);

    public static native IconLayerInterface create();

    public static final class CppProxy extends IconLayerInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void setIcons(ArrayList<IconInfoInterface> icons)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setIcons(this.nativeRef, icons);
        }
        private native void native_setIcons(long _nativeRef, ArrayList<IconInfoInterface> icons);

        @Override
        public ArrayList<IconInfoInterface> getIcons()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getIcons(this.nativeRef);
        }
        private native ArrayList<IconInfoInterface> native_getIcons(long _nativeRef);

        @Override
        public void remove(IconInfoInterface icon)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_remove(this.nativeRef, icon);
        }
        private native void native_remove(long _nativeRef, IconInfoInterface icon);

        @Override
        public void add(IconInfoInterface icon)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_add(this.nativeRef, icon);
        }
        private native void native_add(long _nativeRef, IconInfoInterface icon);

        @Override
        public void clear()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clear(this.nativeRef);
        }
        private native void native_clear(long _nativeRef);

        @Override
        public void setCallbackHandler(IconLayerCallbackInterface handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallbackHandler(this.nativeRef, handler);
        }
        private native void native_setCallbackHandler(long _nativeRef, IconLayerCallbackInterface handler);

        @Override
        public io.openmobilemaps.mapscore.shared.map.LayerInterface asLayerInterface()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asLayerInterface(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.map.LayerInterface native_asLayerInterface(long _nativeRef);

        @Override
        public void invalidate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_invalidate(this.nativeRef);
        }
        private native void native_invalidate(long _nativeRef);

        @Override
        public void setLayerClickable(boolean isLayerClickable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLayerClickable(this.nativeRef, isLayerClickable);
        }
        private native void native_setLayerClickable(long _nativeRef, boolean isLayerClickable);
    }
}
