// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from graphicsobjects.djinni

package io.openmobilemaps.mapscore.shared.graphics.objects;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class GraphicsObjectInterface {
    /** Returns true, if graphics object is ready to be drawn */
    public abstract boolean isReady();

    /** Ensure calling on graphics thread */
    public abstract void setup(io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface context);

    /** Clear graphics object and invalidate isReady */
    public abstract void clear();

    /**
     * by defaults objects if masked are only rendered where the mask is set
     * if setting this flag the masked is applied inversly
     */
    public abstract void setIsInverseMasked(boolean inversed);

    /** Render the graphics object; ensure calling on graphics thread */
    public abstract void render(io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface context, io.openmobilemaps.mapscore.shared.graphics.RenderPassConfig renderPass, long mvpMatrix, boolean isMasked, double screenPixelAsRealMeterFactor);

    public static final class CppProxy extends GraphicsObjectInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public boolean isReady()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isReady(this.nativeRef);
        }
        private native boolean native_isReady(long _nativeRef);

        @Override
        public void setup(io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface context)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setup(this.nativeRef, context);
        }
        private native void native_setup(long _nativeRef, io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface context);

        @Override
        public void clear()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clear(this.nativeRef);
        }
        private native void native_clear(long _nativeRef);

        @Override
        public void setIsInverseMasked(boolean inversed)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setIsInverseMasked(this.nativeRef, inversed);
        }
        private native void native_setIsInverseMasked(long _nativeRef, boolean inversed);

        @Override
        public void render(io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface context, io.openmobilemaps.mapscore.shared.graphics.RenderPassConfig renderPass, long mvpMatrix, boolean isMasked, double screenPixelAsRealMeterFactor)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_render(this.nativeRef, context, renderPass, mvpMatrix, isMasked, screenPixelAsRealMeterFactor);
        }
        private native void native_render(long _nativeRef, io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface context, io.openmobilemaps.mapscore.shared.graphics.RenderPassConfig renderPass, long mvpMatrix, boolean isMasked, double screenPixelAsRealMeterFactor);
    }
}
