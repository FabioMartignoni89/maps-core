// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.graphics;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class RenderPassInterface {
    public abstract ArrayList<RenderObjectInterface> getRenderObjects();

    public abstract void addRenderObject(RenderObjectInterface renderObject);

    public abstract RenderPassConfig getRenderPassConfig();

    public abstract io.openmobilemaps.mapscore.shared.graphics.objects.MaskingObjectInterface getMaskingObject();

    public abstract io.openmobilemaps.mapscore.shared.graphics.common.RectI getScissoringRect();

    public static final class CppProxy extends RenderPassInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public ArrayList<RenderObjectInterface> getRenderObjects()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRenderObjects(this.nativeRef);
        }
        private native ArrayList<RenderObjectInterface> native_getRenderObjects(long _nativeRef);

        @Override
        public void addRenderObject(RenderObjectInterface renderObject)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addRenderObject(this.nativeRef, renderObject);
        }
        private native void native_addRenderObject(long _nativeRef, RenderObjectInterface renderObject);

        @Override
        public RenderPassConfig getRenderPassConfig()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRenderPassConfig(this.nativeRef);
        }
        private native RenderPassConfig native_getRenderPassConfig(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.objects.MaskingObjectInterface getMaskingObject()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMaskingObject(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.objects.MaskingObjectInterface native_getMaskingObject(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.common.RectI getScissoringRect()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getScissoringRect(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.common.RectI native_getScissoringRect(long _nativeRef);
    }
}
