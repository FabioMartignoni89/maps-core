// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.graphics;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class SceneInterface {
    public abstract void setCallbackHandler(SceneCallbackInterface callbackInterface);

    public abstract void setCamera(CameraInterface camera);

    public abstract CameraInterface getCamera();

    public abstract RendererInterface getRenderer();

    public abstract RenderingContextInterface getRenderingContext();

    public abstract io.openmobilemaps.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface getGraphicsFactory();

    public abstract io.openmobilemaps.mapscore.shared.graphics.shader.ShaderFactoryInterface getShaderFactory();

    public abstract void drawFrame();

    public abstract void clear();

    public abstract void invalidate();

    public static native SceneInterface create(io.openmobilemaps.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface graphicsFactory, io.openmobilemaps.mapscore.shared.graphics.shader.ShaderFactoryInterface shaderFactory, RenderingContextInterface renderingContext);

    public static native SceneInterface createWithOpenGl();

    public static final class CppProxy extends SceneInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void setCallbackHandler(SceneCallbackInterface callbackInterface)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallbackHandler(this.nativeRef, callbackInterface);
        }
        private native void native_setCallbackHandler(long _nativeRef, SceneCallbackInterface callbackInterface);

        @Override
        public void setCamera(CameraInterface camera)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCamera(this.nativeRef, camera);
        }
        private native void native_setCamera(long _nativeRef, CameraInterface camera);

        @Override
        public CameraInterface getCamera()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCamera(this.nativeRef);
        }
        private native CameraInterface native_getCamera(long _nativeRef);

        @Override
        public RendererInterface getRenderer()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRenderer(this.nativeRef);
        }
        private native RendererInterface native_getRenderer(long _nativeRef);

        @Override
        public RenderingContextInterface getRenderingContext()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRenderingContext(this.nativeRef);
        }
        private native RenderingContextInterface native_getRenderingContext(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface getGraphicsFactory()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getGraphicsFactory(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface native_getGraphicsFactory(long _nativeRef);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.shader.ShaderFactoryInterface getShaderFactory()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getShaderFactory(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.shader.ShaderFactoryInterface native_getShaderFactory(long _nativeRef);

        @Override
        public void drawFrame()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawFrame(this.nativeRef);
        }
        private native void native_drawFrame(long _nativeRef);

        @Override
        public void clear()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clear(this.nativeRef);
        }
        private native void native_clear(long _nativeRef);

        @Override
        public void invalidate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_invalidate(this.nativeRef);
        }
        private native void native_invalidate(long _nativeRef);
    }
}
