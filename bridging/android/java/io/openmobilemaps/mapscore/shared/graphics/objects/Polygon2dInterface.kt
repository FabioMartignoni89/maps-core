// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from graphicsobjects.djinni

package io.openmobilemaps.mapscore.shared.graphics.objects

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class Polygon2dInterface {

    abstract fun setVertices(vertices: ArrayList<io.openmobilemaps.mapscore.shared.graphics.common.Vec2D>, indices: ArrayList<Int>)

    abstract fun asGraphicsObject(): GraphicsObjectInterface

    abstract fun asMaskingObject(): MaskingObjectInterface

    private class CppProxy : Polygon2dInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        external fun nativeDestroy(nativeRef: Long)

        override fun setVertices(vertices: ArrayList<io.openmobilemaps.mapscore.shared.graphics.common.Vec2D>, indices: ArrayList<Int>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setVertices(this.nativeRef, vertices, indices)
        }
        private external fun native_setVertices(_nativeRef: Long, vertices: ArrayList<io.openmobilemaps.mapscore.shared.graphics.common.Vec2D>, indices: ArrayList<Int>)

        override fun asGraphicsObject(): GraphicsObjectInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asGraphicsObject(this.nativeRef)
        }
        private external fun native_asGraphicsObject(_nativeRef: Long): GraphicsObjectInterface

        override fun asMaskingObject(): MaskingObjectInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asMaskingObject(this.nativeRef)
        }
        private external fun native_asMaskingObject(_nativeRef: Long): MaskingObjectInterface
    }
}
