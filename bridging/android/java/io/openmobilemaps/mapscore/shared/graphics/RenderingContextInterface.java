// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.graphics;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class RenderingContextInterface {
    /** Ensure calling on graphics thread */
    public abstract void onSurfaceCreated();

    /** Ensure calling on graphics thread */
    public abstract void setViewportSize(io.openmobilemaps.mapscore.shared.graphics.common.Vec2I size);

    public abstract io.openmobilemaps.mapscore.shared.graphics.common.Vec2I getViewportSize();

    public abstract void setBackgroundColor(io.openmobilemaps.mapscore.shared.graphics.common.Color color);

    public abstract void setupDrawFrame();

    public abstract void preRenderStencilMask();

    public abstract void postRenderStencilMask();

    /** optional rectangle, remove scissoring when not set */
    public abstract void applyScissorRect(io.openmobilemaps.mapscore.shared.graphics.common.RectI scissorRect);

    public static final class CppProxy extends RenderingContextInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void onSurfaceCreated()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onSurfaceCreated(this.nativeRef);
        }
        private native void native_onSurfaceCreated(long _nativeRef);

        @Override
        public void setViewportSize(io.openmobilemaps.mapscore.shared.graphics.common.Vec2I size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setViewportSize(this.nativeRef, size);
        }
        private native void native_setViewportSize(long _nativeRef, io.openmobilemaps.mapscore.shared.graphics.common.Vec2I size);

        @Override
        public io.openmobilemaps.mapscore.shared.graphics.common.Vec2I getViewportSize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getViewportSize(this.nativeRef);
        }
        private native io.openmobilemaps.mapscore.shared.graphics.common.Vec2I native_getViewportSize(long _nativeRef);

        @Override
        public void setBackgroundColor(io.openmobilemaps.mapscore.shared.graphics.common.Color color)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBackgroundColor(this.nativeRef, color);
        }
        private native void native_setBackgroundColor(long _nativeRef, io.openmobilemaps.mapscore.shared.graphics.common.Color color);

        @Override
        public void setupDrawFrame()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setupDrawFrame(this.nativeRef);
        }
        private native void native_setupDrawFrame(long _nativeRef);

        @Override
        public void preRenderStencilMask()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_preRenderStencilMask(this.nativeRef);
        }
        private native void native_preRenderStencilMask(long _nativeRef);

        @Override
        public void postRenderStencilMask()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_postRenderStencilMask(this.nativeRef);
        }
        private native void native_postRenderStencilMask(long _nativeRef);

        @Override
        public void applyScissorRect(io.openmobilemaps.mapscore.shared.graphics.common.RectI scissorRect)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_applyScissorRect(this.nativeRef, scissorRect);
        }
        private native void native_applyScissorRect(long _nativeRef, io.openmobilemaps.mapscore.shared.graphics.common.RectI scissorRect);
    }
}
