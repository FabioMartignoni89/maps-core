// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from graphicsobjects.djinni

package io.openmobilemaps.mapscore.shared.graphics.objects;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Polygon2dInterface {
    public abstract void setVertices(ArrayList<io.openmobilemaps.mapscore.shared.graphics.common.Vec2D> vertices, ArrayList<Integer> indices);

    public abstract GraphicsObjectInterface asGraphicsObject();

    public abstract MaskingObjectInterface asMaskingObject();

    public static final class CppProxy extends Polygon2dInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void setVertices(ArrayList<io.openmobilemaps.mapscore.shared.graphics.common.Vec2D> vertices, ArrayList<Integer> indices)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setVertices(this.nativeRef, vertices, indices);
        }
        private native void native_setVertices(long _nativeRef, ArrayList<io.openmobilemaps.mapscore.shared.graphics.common.Vec2D> vertices, ArrayList<Integer> indices);

        @Override
        public GraphicsObjectInterface asGraphicsObject()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asGraphicsObject(this.nativeRef);
        }
        private native GraphicsObjectInterface native_asGraphicsObject(long _nativeRef);

        @Override
        public MaskingObjectInterface asMaskingObject()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asMaskingObject(this.nativeRef);
        }
        private native MaskingObjectInterface native_asMaskingObject(long _nativeRef);
    }
}
