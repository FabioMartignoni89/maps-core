// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from shader.djinni

#include "NativeTextShaderInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeColor.h"
#include "NativeShaderProgramInterface.h"
#include "NativeVec3D.h"

namespace djinni_generated {

NativeTextShaderInterface::NativeTextShaderInterface() : ::djinni::JniInterface<::TextShaderInterface, NativeTextShaderInterface>("io/openmobilemaps/mapscore/shared/graphics/shader/TextShaderInterface$CppProxy") {}

NativeTextShaderInterface::~NativeTextShaderInterface() = default;


CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_TextShaderInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::TextShaderInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_TextShaderInterface_00024CppProxy_native_1setColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeColor::JniType j_color)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::TextShaderInterface>(nativeRef);
        ref->setColor(::djinni_generated::NativeColor::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_TextShaderInterface_00024CppProxy_native_1setHaloColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeColor::JniType j_color)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::TextShaderInterface>(nativeRef);
        ref->setHaloColor(::djinni_generated::NativeColor::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_TextShaderInterface_00024CppProxy_native_1setScale(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_scale)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::TextShaderInterface>(nativeRef);
        ref->setScale(::djinni::F32::toCpp(jniEnv, j_scale));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_TextShaderInterface_00024CppProxy_native_1setReferencePoint(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeVec3D::JniType j_point)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::TextShaderInterface>(nativeRef);
        ref->setReferencePoint(::djinni_generated::NativeVec3D::toCpp(jniEnv, j_point));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_TextShaderInterface_00024CppProxy_native_1asShaderProgramInterface(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::TextShaderInterface>(nativeRef);
        auto r = ref->asShaderProgramInterface();
        return ::djinni::release(::djinni_generated::NativeShaderProgramInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} // namespace djinni_generated
