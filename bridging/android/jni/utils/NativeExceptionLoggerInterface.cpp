// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from exception_logger.djinni

#include "NativeExceptionLoggerInterface.h"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeExceptionLoggerInterface::NativeExceptionLoggerInterface() : ::djinni::JniInterface<::ExceptionLoggerInterface, NativeExceptionLoggerInterface>("io/openmobilemaps/mapscore/shared/utils/ExceptionLoggerInterface$CppProxy") {}

NativeExceptionLoggerInterface::~NativeExceptionLoggerInterface() = default;

NativeExceptionLoggerInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeExceptionLoggerInterface::JavaProxy::~JavaProxy() = default;

void NativeExceptionLoggerInterface::JavaProxy::logMessage(const std::string & c_errorDomain, int32_t c_code, const std::unordered_map<std::string, std::string> & c_customValues) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeExceptionLoggerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_logMessage,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_errorDomain)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_code)),
                           ::djinni::get(::djinni::Map<::djinni::String, ::djinni::String>::fromCpp(jniEnv, c_customValues)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_utils_ExceptionLoggerInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ExceptionLoggerInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_utils_ExceptionLoggerInterface_00024CppProxy_native_1logMessage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_errorDomain, jint j_code, jobject j_customValues)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ExceptionLoggerInterface>(nativeRef);
        ref->logMessage(::djinni::String::toCpp(jniEnv, j_errorDomain),
                        ::djinni::I32::toCpp(jniEnv, j_code),
                        ::djinni::Map<::djinni::String, ::djinni::String>::toCpp(jniEnv, j_customValues));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
