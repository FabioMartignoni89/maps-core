// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from loader.djinni

#include "NativeLoaderInterface.h"  // my header
#include "Future_jni.hpp"
#include "Marshal.hpp"
#include "NativeDataLoaderResult.h"
#include "NativeTextureLoaderResult.h"

namespace djinni_generated {

NativeLoaderInterface::NativeLoaderInterface() : ::djinni::JniInterface<::LoaderInterface, NativeLoaderInterface>("io/openmobilemaps/mapscore/shared/map/loader/LoaderInterface$CppProxy") {}

NativeLoaderInterface::~NativeLoaderInterface() = default;

NativeLoaderInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeLoaderInterface::JavaProxy::~JavaProxy() = default;

::TextureLoaderResult NativeLoaderInterface::JavaProxy::loadTexture(const std::string & c_url, const std::optional<std::string> & c_etag) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLoaderInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_loadTexture,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)),
                                         ::djinni::get(::djinni::Optional<std::optional, ::djinni::String>::fromCpp(jniEnv, c_etag)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeTextureLoaderResult::toCpp(jniEnv, jret);
}
::DataLoaderResult NativeLoaderInterface::JavaProxy::loadData(const std::string & c_url, const std::optional<std::string> & c_etag) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLoaderInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_loadData,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)),
                                         ::djinni::get(::djinni::Optional<std::optional, ::djinni::String>::fromCpp(jniEnv, c_etag)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeDataLoaderResult::toCpp(jniEnv, jret);
}
::djinni::Future<::TextureLoaderResult> NativeLoaderInterface::JavaProxy::loadTextureAsnyc(const std::string & c_url, const std::optional<std::string> & c_etag) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLoaderInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_loadTextureAsnyc,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)),
                                         ::djinni::get(::djinni::Optional<std::optional, ::djinni::String>::fromCpp(jniEnv, c_etag)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::FutureAdaptor<::djinni_generated::NativeTextureLoaderResult>::toCpp(jniEnv, jret);
}
::djinni::Future<::DataLoaderResult> NativeLoaderInterface::JavaProxy::loadDataAsync(const std::string & c_url, const std::optional<std::string> & c_etag) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLoaderInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_loadDataAsync,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)),
                                         ::djinni::get(::djinni::Optional<std::optional, ::djinni::String>::fromCpp(jniEnv, c_etag)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::FutureAdaptor<::djinni_generated::NativeDataLoaderResult>::toCpp(jniEnv, jret);
}
void NativeLoaderInterface::JavaProxy::cancel(const std::string & c_url) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLoaderInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_cancel,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_loader_LoaderInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::LoaderInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_map_loader_LoaderInterface_00024CppProxy_native_1loadTexture(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_etag)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LoaderInterface>(nativeRef);
        auto r = ref->loadTexture(::djinni::String::toCpp(jniEnv, j_url),
                                  ::djinni::Optional<std::optional, ::djinni::String>::toCpp(jniEnv, j_etag));
        return ::djinni::release(::djinni_generated::NativeTextureLoaderResult::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_map_loader_LoaderInterface_00024CppProxy_native_1loadData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_etag)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LoaderInterface>(nativeRef);
        auto r = ref->loadData(::djinni::String::toCpp(jniEnv, j_url),
                               ::djinni::Optional<std::optional, ::djinni::String>::toCpp(jniEnv, j_etag));
        return ::djinni::release(::djinni_generated::NativeDataLoaderResult::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT ::djinni::FutureAdaptor<::djinni_generated::NativeTextureLoaderResult>::JniType JNICALL Java_io_openmobilemaps_mapscore_shared_map_loader_LoaderInterface_00024CppProxy_native_1loadTextureAsnyc(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_etag)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LoaderInterface>(nativeRef);
        auto r = ref->loadTextureAsnyc(::djinni::String::toCpp(jniEnv, j_url),
                                       ::djinni::Optional<std::optional, ::djinni::String>::toCpp(jniEnv, j_etag));
        return ::djinni::release(::djinni::FutureAdaptor<::djinni_generated::NativeTextureLoaderResult>::fromCpp(jniEnv, std::move(r)));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT ::djinni::FutureAdaptor<::djinni_generated::NativeDataLoaderResult>::JniType JNICALL Java_io_openmobilemaps_mapscore_shared_map_loader_LoaderInterface_00024CppProxy_native_1loadDataAsync(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_etag)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LoaderInterface>(nativeRef);
        auto r = ref->loadDataAsync(::djinni::String::toCpp(jniEnv, j_url),
                                    ::djinni::Optional<std::optional, ::djinni::String>::toCpp(jniEnv, j_etag));
        return ::djinni::release(::djinni::FutureAdaptor<::djinni_generated::NativeDataLoaderResult>::fromCpp(jniEnv, std::move(r)));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_loader_LoaderInterface_00024CppProxy_native_1cancel(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LoaderInterface>(nativeRef);
        ref->cancel(::djinni::String::toCpp(jniEnv, j_url));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

} // namespace djinni_generated
