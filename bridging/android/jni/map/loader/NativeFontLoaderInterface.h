// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from loader.djinni

#pragma once

#include "FontLoaderInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeFontLoaderInterface final : ::djinni::JniInterface<::FontLoaderInterface, NativeFontLoaderInterface> {
public:
    using CppType = std::shared_ptr<::FontLoaderInterface>;
    using CppOptType = std::shared_ptr<::FontLoaderInterface>;
    using JniType = jobject;

    using Boxed = NativeFontLoaderInterface;

    ~NativeFontLoaderInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeFontLoaderInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeFontLoaderInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeFontLoaderInterface();
    friend ::djinni::JniClass<NativeFontLoaderInterface>;
    friend ::djinni::JniInterface<::FontLoaderInterface, NativeFontLoaderInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::FontLoaderInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        ::FontLoaderResult loadFont(const ::Font & font) override;

    private:
        friend ::djinni::JniInterface<::FontLoaderInterface, ::djinni_generated::NativeFontLoaderInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/loader/FontLoaderInterface") };
    const jmethodID method_loadFont { ::djinni::jniGetMethodID(clazz.get(), "loadFont", "(Lio/openmobilemaps/mapscore/shared/map/loader/Font;)Lio/openmobilemaps/mapscore/shared/map/loader/FontLoaderResult;") };
};

} // namespace djinni_generated
