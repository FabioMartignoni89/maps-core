// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from loader.djinni

#pragma once

#include "FontLoaderResult.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeFontLoaderResult final {
public:
    using CppType = ::FontLoaderResult;
    using JniType = jobject;

    using Boxed = NativeFontLoaderResult;

    ~NativeFontLoaderResult();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeFontLoaderResult();
    friend ::djinni::JniClass<NativeFontLoaderResult>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/loader/FontLoaderResult") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Lio/openmobilemaps/mapscore/shared/graphics/objects/TextureHolderInterface;Lio/openmobilemaps/mapscore/shared/map/loader/FontData;Lio/openmobilemaps/mapscore/shared/map/loader/LoaderStatus;)V") };
    const jfieldID field_imageData { ::djinni::jniGetFieldID(clazz.get(), "imageData", "Lio/openmobilemaps/mapscore/shared/graphics/objects/TextureHolderInterface;") };
    const jfieldID field_fontData { ::djinni::jniGetFieldID(clazz.get(), "fontData", "Lio/openmobilemaps/mapscore/shared/map/loader/FontData;") };
    const jfieldID field_status { ::djinni::jniGetFieldID(clazz.get(), "status", "Lio/openmobilemaps/mapscore/shared/map/loader/LoaderStatus;") };
};

} // namespace djinni_generated
