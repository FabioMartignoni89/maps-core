// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from loader.djinni

#pragma once

#include "LoaderInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeLoaderInterface final : ::djinni::JniInterface<::LoaderInterface, NativeLoaderInterface> {
public:
    using CppType = std::shared_ptr<::LoaderInterface>;
    using CppOptType = std::shared_ptr<::LoaderInterface>;
    using JniType = jobject;

    using Boxed = NativeLoaderInterface;

    ~NativeLoaderInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeLoaderInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeLoaderInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeLoaderInterface();
    friend ::djinni::JniClass<NativeLoaderInterface>;
    friend ::djinni::JniInterface<::LoaderInterface, NativeLoaderInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::LoaderInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        ::TextureLoaderResult loadTexture(const std::string & url, const std::optional<std::string> & etag) override;
        ::DataLoaderResult loadData(const std::string & url, const std::optional<std::string> & etag) override;
        ::djinni::Future<::TextureLoaderResult> loadTextureAsnyc(const std::string & url, const std::optional<std::string> & etag) override;
        ::djinni::Future<::DataLoaderResult> loadDataAsync(const std::string & url, const std::optional<std::string> & etag) override;
        void cancel(const std::string & url) override;

    private:
        friend ::djinni::JniInterface<::LoaderInterface, ::djinni_generated::NativeLoaderInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/loader/LoaderInterface") };
    const jmethodID method_loadTexture { ::djinni::jniGetMethodID(clazz.get(), "loadTexture", "(Ljava/lang/String;Ljava/lang/String;)Lio/openmobilemaps/mapscore/shared/map/loader/TextureLoaderResult;") };
    const jmethodID method_loadData { ::djinni::jniGetMethodID(clazz.get(), "loadData", "(Ljava/lang/String;Ljava/lang/String;)Lio/openmobilemaps/mapscore/shared/map/loader/DataLoaderResult;") };
    const jmethodID method_loadTextureAsnyc { ::djinni::jniGetMethodID(clazz.get(), "loadTextureAsnyc", "(Ljava/lang/String;Ljava/lang/String;)Lcom/snapchat/djinni/Future;") };
    const jmethodID method_loadDataAsync { ::djinni::jniGetMethodID(clazz.get(), "loadDataAsync", "(Ljava/lang/String;Ljava/lang/String;)Lcom/snapchat/djinni/Future;") };
    const jmethodID method_cancel { ::djinni::jniGetMethodID(clazz.get(), "cancel", "(Ljava/lang/String;)V") };
};

} // namespace djinni_generated
