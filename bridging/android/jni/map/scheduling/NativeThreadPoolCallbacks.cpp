// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from task_scheduler.djinni

#include "NativeThreadPoolCallbacks.h"  // my header
#include "Marshal.hpp"
#include "NativeTaskPriority.h"

namespace djinni_generated {

NativeThreadPoolCallbacks::NativeThreadPoolCallbacks() : ::djinni::JniInterface<::ThreadPoolCallbacks, NativeThreadPoolCallbacks>("io/openmobilemaps/mapscore/shared/map/scheduling/ThreadPoolCallbacks$CppProxy") {}

NativeThreadPoolCallbacks::~NativeThreadPoolCallbacks() = default;

NativeThreadPoolCallbacks::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeThreadPoolCallbacks::JavaProxy::~JavaProxy() = default;

std::string NativeThreadPoolCallbacks::JavaProxy::getCurrentThreadName() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeThreadPoolCallbacks>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getCurrentThreadName);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
void NativeThreadPoolCallbacks::JavaProxy::setCurrentThreadName(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeThreadPoolCallbacks>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setCurrentThreadName,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeThreadPoolCallbacks::JavaProxy::setThreadPriority(::TaskPriority c_priority) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeThreadPoolCallbacks>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setThreadPriority,
                           ::djinni::get(::djinni_generated::NativeTaskPriority::fromCpp(jniEnv, c_priority)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeThreadPoolCallbacks::JavaProxy::attachThread() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeThreadPoolCallbacks>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_attachThread);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeThreadPoolCallbacks::JavaProxy::detachThread() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeThreadPoolCallbacks>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_detachThread);
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_ThreadPoolCallbacks_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ThreadPoolCallbacks>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_ThreadPoolCallbacks_00024CppProxy_native_1getCurrentThreadName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ThreadPoolCallbacks>(nativeRef);
        auto r = ref->getCurrentThreadName();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_ThreadPoolCallbacks_00024CppProxy_native_1setCurrentThreadName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ThreadPoolCallbacks>(nativeRef);
        ref->setCurrentThreadName(::djinni::String::toCpp(jniEnv, j_name));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_ThreadPoolCallbacks_00024CppProxy_native_1setThreadPriority(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_priority)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ThreadPoolCallbacks>(nativeRef);
        ref->setThreadPriority(::djinni_generated::NativeTaskPriority::toCpp(jniEnv, j_priority));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_ThreadPoolCallbacks_00024CppProxy_native_1attachThread(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ThreadPoolCallbacks>(nativeRef);
        ref->attachThread();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_ThreadPoolCallbacks_00024CppProxy_native_1detachThread(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ThreadPoolCallbacks>(nativeRef);
        ref->detachThread();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
