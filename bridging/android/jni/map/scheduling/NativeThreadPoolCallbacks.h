// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from task_scheduler.djinni

#pragma once

#include "ThreadPoolCallbacks.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeThreadPoolCallbacks final : ::djinni::JniInterface<::ThreadPoolCallbacks, NativeThreadPoolCallbacks> {
public:
    using CppType = std::shared_ptr<::ThreadPoolCallbacks>;
    using CppOptType = std::shared_ptr<::ThreadPoolCallbacks>;
    using JniType = jobject;

    using Boxed = NativeThreadPoolCallbacks;

    ~NativeThreadPoolCallbacks();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeThreadPoolCallbacks>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeThreadPoolCallbacks>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeThreadPoolCallbacks();
    friend ::djinni::JniClass<NativeThreadPoolCallbacks>;
    friend ::djinni::JniInterface<::ThreadPoolCallbacks, NativeThreadPoolCallbacks>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ThreadPoolCallbacks
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string getCurrentThreadName() override;
        void setCurrentThreadName(const std::string & name) override;
        void setThreadPriority(::TaskPriority priority) override;
        void attachThread() override;
        void detachThread() override;

    private:
        friend ::djinni::JniInterface<::ThreadPoolCallbacks, ::djinni_generated::NativeThreadPoolCallbacks>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/scheduling/ThreadPoolCallbacks") };
    const jmethodID method_getCurrentThreadName { ::djinni::jniGetMethodID(clazz.get(), "getCurrentThreadName", "()Ljava/lang/String;") };
    const jmethodID method_setCurrentThreadName { ::djinni::jniGetMethodID(clazz.get(), "setCurrentThreadName", "(Ljava/lang/String;)V") };
    const jmethodID method_setThreadPriority { ::djinni::jniGetMethodID(clazz.get(), "setThreadPriority", "(Lio/openmobilemaps/mapscore/shared/map/scheduling/TaskPriority;)V") };
    const jmethodID method_attachThread { ::djinni::jniGetMethodID(clazz.get(), "attachThread", "()V") };
    const jmethodID method_detachThread { ::djinni::jniGetMethodID(clazz.get(), "detachThread", "()V") };
};

}  // namespace djinni_generated
