// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from line.djinni

#include "NativeLineLayerInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeLayerInterface.h"
#include "NativeLineInfoInterface.h"
#include "NativeLineLayerCallbackInterface.h"

namespace djinni_generated {

NativeLineLayerInterface::NativeLineLayerInterface() : ::djinni::JniInterface<::LineLayerInterface, NativeLineLayerInterface>("io/openmobilemaps/mapscore/shared/map/layers/line/LineLayerInterface$CppProxy") {}

NativeLineLayerInterface::~NativeLineLayerInterface() = default;


CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::LineLayerInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        auto r = ::LineLayerInterface::create();
        return ::djinni::release(::djinni_generated::NativeLineLayerInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1setLines(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_lines)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->setLines(::djinni::List<::djinni_generated::NativeLineInfoInterface>::toCpp(jniEnv, j_lines));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1getLines(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        auto r = ref->getLines();
        return ::djinni::release(::djinni::List<::djinni_generated::NativeLineInfoInterface>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1remove(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_line)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->remove(::djinni_generated::NativeLineInfoInterface::toCpp(jniEnv, j_line));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1add(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_line)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->add(::djinni_generated::NativeLineInfoInterface::toCpp(jniEnv, j_line));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1clear(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->clear();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1setCallbackHandler(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_handler)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->setCallbackHandler(::djinni_generated::NativeLineLayerCallbackInterface::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT ::djinni_generated::NativeLayerInterface::JniType JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1asLayerInterface(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        auto r = ref->asLayerInterface();
        return ::djinni::release(::djinni_generated::NativeLayerInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1invalidate(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->invalidate();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1resetSelection(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->resetSelection();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1setSelected(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_selectedIds)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->setSelected(::djinni::Set<::djinni::String>::toCpp(jniEnv, j_selectedIds));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_layers_line_LineLayerInterface_00024CppProxy_native_1setLayerClickable(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_isLayerClickable)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::LineLayerInterface>(nativeRef);
        ref->setLayerClickable(::djinni::Bool::toCpp(jniEnv, j_isLayerClickable));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

} // namespace djinni_generated
