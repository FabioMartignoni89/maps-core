// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from line.djinni

#pragma once

#include "SimpleLineStyle.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeSimpleLineStyle final {
public:
    using CppType = ::SimpleLineStyle;
    using JniType = jobject;

    using Boxed = NativeSimpleLineStyle;

    ~NativeSimpleLineStyle();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeSimpleLineStyle();
    friend ::djinni::JniClass<NativeSimpleLineStyle>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/layers/line/SimpleLineStyle") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Lio/openmobilemaps/mapscore/shared/map/layers/ColorStateList;Lio/openmobilemaps/mapscore/shared/map/layers/SizeType;FLjava/util/ArrayList;Lio/openmobilemaps/mapscore/shared/map/layers/line/LineCapType;FZF)V") };
    const jfieldID field_color { ::djinni::jniGetFieldID(clazz.get(), "color", "Lio/openmobilemaps/mapscore/shared/map/layers/ColorStateList;") };
    const jfieldID field_widthType { ::djinni::jniGetFieldID(clazz.get(), "widthType", "Lio/openmobilemaps/mapscore/shared/map/layers/SizeType;") };
    const jfieldID field_width { ::djinni::jniGetFieldID(clazz.get(), "width", "F") };
    const jfieldID field_dashArray { ::djinni::jniGetFieldID(clazz.get(), "dashArray", "Ljava/util/ArrayList;") };
    const jfieldID field_lineCap { ::djinni::jniGetFieldID(clazz.get(), "lineCap", "Lio/openmobilemaps/mapscore/shared/map/layers/line/LineCapType;") };
    const jfieldID field_offset { ::djinni::jniGetFieldID(clazz.get(), "offset", "F") };
    const jfieldID field_dotted { ::djinni::jniGetFieldID(clazz.get(), "dotted", "Z") };
    const jfieldID field_dottedSkew { ::djinni::jniGetFieldID(clazz.get(), "dottedSkew", "F") };
};

} // namespace djinni_generated
