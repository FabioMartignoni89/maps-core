// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from line.djinni

#pragma once

#include "ShaderSimpleLineStyle.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeShaderSimpleLineStyle final {
public:
    using CppType = ::ShaderSimpleLineStyle;
    using JniType = jobject;

    using Boxed = NativeShaderSimpleLineStyle;

    ~NativeShaderSimpleLineStyle();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeShaderSimpleLineStyle();
    friend ::djinni::JniClass<NativeShaderSimpleLineStyle>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/layers/line/ShaderSimpleLineStyle") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(FFFFFFFF)V") };
    const jfieldID field_width { ::djinni::jniGetFieldID(clazz.get(), "width", "F") };
    const jfieldID field_colorR { ::djinni::jniGetFieldID(clazz.get(), "colorR", "F") };
    const jfieldID field_colorG { ::djinni::jniGetFieldID(clazz.get(), "colorG", "F") };
    const jfieldID field_colorB { ::djinni::jniGetFieldID(clazz.get(), "colorB", "F") };
    const jfieldID field_colorA { ::djinni::jniGetFieldID(clazz.get(), "colorA", "F") };
    const jfieldID field_widthAsPixel { ::djinni::jniGetFieldID(clazz.get(), "widthAsPixel", "F") };
    const jfieldID field_opacity { ::djinni::jniGetFieldID(clazz.get(), "opacity", "F") };
    const jfieldID field_lineCap { ::djinni::jniGetFieldID(clazz.get(), "lineCap", "F") };
};

} // namespace djinni_generated
