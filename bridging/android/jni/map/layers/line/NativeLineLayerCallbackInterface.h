// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from line.djinni

#pragma once

#include "LineLayerCallbackInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeLineLayerCallbackInterface final : ::djinni::JniInterface<::LineLayerCallbackInterface, NativeLineLayerCallbackInterface> {
public:
    using CppType = std::shared_ptr<::LineLayerCallbackInterface>;
    using CppOptType = std::shared_ptr<::LineLayerCallbackInterface>;
    using JniType = jobject;

    using Boxed = NativeLineLayerCallbackInterface;

    ~NativeLineLayerCallbackInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeLineLayerCallbackInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeLineLayerCallbackInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeLineLayerCallbackInterface();
    friend ::djinni::JniClass<NativeLineLayerCallbackInterface>;
    friend ::djinni::JniInterface<::LineLayerCallbackInterface, NativeLineLayerCallbackInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::LineLayerCallbackInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        bool onLineClickConfirmed(const std::vector<std::shared_ptr<::LineInfoInterface>> & icons) override;

    private:
        friend ::djinni::JniInterface<::LineLayerCallbackInterface, ::djinni_generated::NativeLineLayerCallbackInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/layers/line/LineLayerCallbackInterface") };
    const jmethodID method_onLineClickConfirmed { ::djinni::jniGetMethodID(clazz.get(), "onLineClickConfirmed", "(Ljava/util/ArrayList;)Z") };
};

}  // namespace djinni_generated
