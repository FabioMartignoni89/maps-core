// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from line.djinni

#pragma once

#include "LineInfo.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeLineInfo final {
public:
    using CppType = ::LineInfo;
    using JniType = jobject;

    using Boxed = NativeLineInfo;

    ~NativeLineInfo();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeLineInfo();
    friend ::djinni::JniClass<NativeLineInfo>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/layers/line/LineInfo") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/String;Ljava/util/ArrayList;FLio/openmobilemaps/mapscore/shared/graphics/common/Color;Lio/openmobilemaps/mapscore/shared/graphics/common/Color;)V") };
    const jfieldID field_identifier { ::djinni::jniGetFieldID(clazz.get(), "identifier", "Ljava/lang/String;") };
    const jfieldID field_coordinates { ::djinni::jniGetFieldID(clazz.get(), "coordinates", "Ljava/util/ArrayList;") };
    const jfieldID field_miter { ::djinni::jniGetFieldID(clazz.get(), "miter", "F") };
    const jfieldID field_color { ::djinni::jniGetFieldID(clazz.get(), "color", "Lio/openmobilemaps/mapscore/shared/graphics/common/Color;") };
    const jfieldID field_highlightColor { ::djinni::jniGetFieldID(clazz.get(), "highlightColor", "Lio/openmobilemaps/mapscore/shared/graphics/common/Color;") };
};

}  // namespace djinni_generated
