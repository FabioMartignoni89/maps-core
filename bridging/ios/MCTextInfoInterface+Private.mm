// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from text.djinni

#import "MCTextInfoInterface+Private.h"
#import "MCTextInfoInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCCoord+Private.h"
#import "MCFont+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCTextInfoInterfaceCppProxy : NSObject<MCTextInfoInterface>

- (id)initWithCpp:(const std::shared_ptr<::TextInfoInterface>&)cppRef;

@end

@implementation MCTextInfoInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::TextInfoInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::TextInfoInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getText {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getText();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MCCoord *)getCoordinate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCoordinate();
        return ::djinni_generated::Coord::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MCFont *)getFont {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getFont();
        return ::djinni_generated::Font::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class TextInfoInterface::ObjcProxy final
: public ::TextInfoInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::TextInfoInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::string getText() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getText];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    ::Coord getCoordinate() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getCoordinate];
            return ::djinni_generated::Coord::toCpp(objcpp_result_);
        }
    }
    ::Font getFont() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getFont];
            return ::djinni_generated::Font::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto TextInfoInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCTextInfoInterfaceCppProxy class]]) {
        return ((MCTextInfoInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto TextInfoInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCTextInfoInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
