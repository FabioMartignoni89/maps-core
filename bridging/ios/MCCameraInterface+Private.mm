// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#import "MCCameraInterface+Private.h"
#import "MCCameraInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCVec3F+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCCameraInterfaceCppProxy : NSObject<MCCameraInterface>

- (id)initWithCpp:(const std::shared_ptr<::CameraInterface>&)cppRef;

@end

@implementation MCCameraInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::CameraInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::CameraInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSArray<NSNumber *> *)getViewMatrix {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getViewMatrix();
        return ::djinni::List<::djinni::F32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)getProjectionMatrix {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getProjectionMatrix();
        return ::djinni::List<::djinni::F32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)getScalingFactor {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getScalingFactor();
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MCVec3F *)getOrigin {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getOrigin();
        return ::djinni_generated::Vec3F::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)viewportSizeChanged {
    try {
        _cppRefHandle.get()->viewportSizeChanged();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class CameraInterface::ObjcProxy final
: public ::CameraInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::CameraInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::vector<float> getViewMatrix() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getViewMatrix];
            return ::djinni::List<::djinni::F32>::toCpp(objcpp_result_);
        }
    }
    std::vector<float> getProjectionMatrix() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getProjectionMatrix];
            return ::djinni::List<::djinni::F32>::toCpp(objcpp_result_);
        }
    }
    double getScalingFactor() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getScalingFactor];
            return ::djinni::F64::toCpp(objcpp_result_);
        }
    }
    ::Vec3F getOrigin() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getOrigin];
            return ::djinni_generated::Vec3F::toCpp(objcpp_result_);
        }
    }
    void viewportSizeChanged() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() viewportSizeChanged];
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto CameraInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCCameraInterfaceCppProxy class]]) {
        return ((MCCameraInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto CameraInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCCameraInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
