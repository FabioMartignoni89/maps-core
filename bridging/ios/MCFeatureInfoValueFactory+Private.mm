// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from tiled_vector_layer.djinni

#import "MCFeatureInfoValueFactory+Private.h"
#import "MCFeatureInfoValueFactory.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "MCColor+Private.h"
#import "MCVectorLayerFeatureInfoValue+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCFeatureInfoValueFactory ()

- (id)initWithCpp:(const std::shared_ptr<::FeatureInfoValueFactory>&)cppRef;

@end

@implementation MCFeatureInfoValueFactory {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::FeatureInfoValueFactory>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::FeatureInfoValueFactory>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull MCVectorLayerFeatureInfoValue *)createString:(nonnull NSString *)value {
    try {
        auto objcpp_result_ = ::FeatureInfoValueFactory::createString(::djinni::String::toCpp(value));
        return ::djinni_generated::VectorLayerFeatureInfoValue::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull MCVectorLayerFeatureInfoValue *)createDouble:(double)value {
    try {
        auto objcpp_result_ = ::FeatureInfoValueFactory::createDouble(::djinni::F64::toCpp(value));
        return ::djinni_generated::VectorLayerFeatureInfoValue::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull MCVectorLayerFeatureInfoValue *)createInt:(int64_t)value {
    try {
        auto objcpp_result_ = ::FeatureInfoValueFactory::createInt(::djinni::I64::toCpp(value));
        return ::djinni_generated::VectorLayerFeatureInfoValue::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull MCVectorLayerFeatureInfoValue *)createBool:(BOOL)value {
    try {
        auto objcpp_result_ = ::FeatureInfoValueFactory::createBool(::djinni::Bool::toCpp(value));
        return ::djinni_generated::VectorLayerFeatureInfoValue::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull MCVectorLayerFeatureInfoValue *)createColor:(nonnull MCColor *)value {
    try {
        auto objcpp_result_ = ::FeatureInfoValueFactory::createColor(::djinni_generated::Color::toCpp(value));
        return ::djinni_generated::VectorLayerFeatureInfoValue::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull MCVectorLayerFeatureInfoValue *)createListFloat:(nonnull NSArray<NSNumber *> *)value {
    try {
        auto objcpp_result_ = ::FeatureInfoValueFactory::createListFloat(::djinni::List<::djinni::F32>::toCpp(value));
        return ::djinni_generated::VectorLayerFeatureInfoValue::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull MCVectorLayerFeatureInfoValue *)createListString:(nonnull NSArray<NSString *> *)value {
    try {
        auto objcpp_result_ = ::FeatureInfoValueFactory::createListString(::djinni::List<::djinni::String>::toCpp(value));
        return ::djinni_generated::VectorLayerFeatureInfoValue::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto FeatureInfoValueFactory::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto FeatureInfoValueFactory::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<MCFeatureInfoValueFactory>(cpp);
}

} // namespace djinni_generated

@end
