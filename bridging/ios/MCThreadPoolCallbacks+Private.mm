// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from task_scheduler.djinni

#import "MCThreadPoolCallbacks+Private.h"
#import "MCThreadPoolCallbacks.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCTaskPriority+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCThreadPoolCallbacksCppProxy : NSObject<MCThreadPoolCallbacks>

- (id)initWithCpp:(const std::shared_ptr<::ThreadPoolCallbacks>&)cppRef;

@end

@implementation MCThreadPoolCallbacksCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ThreadPoolCallbacks>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ThreadPoolCallbacks>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getCurrentThreadName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCurrentThreadName();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCurrentThreadName:(nonnull NSString *)name {
    try {
        _cppRefHandle.get()->setCurrentThreadName(::djinni::String::toCpp(name));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setThreadPriority:(MCTaskPriority)priority {
    try {
        _cppRefHandle.get()->setThreadPriority(::djinni::Enum<::TaskPriority, MCTaskPriority>::toCpp(priority));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)attachThread {
    try {
        _cppRefHandle.get()->attachThread();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)detachThread {
    try {
        _cppRefHandle.get()->detachThread();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class ThreadPoolCallbacks::ObjcProxy final
: public ::ThreadPoolCallbacks
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::ThreadPoolCallbacks;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::string getCurrentThreadName() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getCurrentThreadName];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    void setCurrentThreadName(const std::string & c_name) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setCurrentThreadName:(::djinni::String::fromCpp(c_name))];
        }
    }
    void setThreadPriority(::TaskPriority c_priority) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setThreadPriority:(::djinni::Enum<::TaskPriority, MCTaskPriority>::fromCpp(c_priority))];
        }
    }
    void attachThread() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() attachThread];
        }
    }
    void detachThread() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() detachThread];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto ThreadPoolCallbacks::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCThreadPoolCallbacksCppProxy class]]) {
        return ((MCThreadPoolCallbacksCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto ThreadPoolCallbacks::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCThreadPoolCallbacksCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
