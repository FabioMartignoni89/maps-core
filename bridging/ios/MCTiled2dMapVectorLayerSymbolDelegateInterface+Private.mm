// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from tiled_vector_layer.djinni

#import "MCTiled2dMapVectorLayerSymbolDelegateInterface+Private.h"
#import "MCTiled2dMapVectorLayerSymbolDelegateInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCTiled2dMapVectorAssetInfo+Private.h"
#import "MCVectorLayerFeatureInfo+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCTiled2dMapVectorLayerSymbolDelegateInterfaceCppProxy : NSObject<MCTiled2dMapVectorLayerSymbolDelegateInterface>

- (id)initWithCpp:(const std::shared_ptr<::Tiled2dMapVectorLayerSymbolDelegateInterface>&)cppRef;

@end

@implementation MCTiled2dMapVectorLayerSymbolDelegateInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Tiled2dMapVectorLayerSymbolDelegateInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Tiled2dMapVectorLayerSymbolDelegateInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSArray<MCTiled2dMapVectorAssetInfo *> *)getCustomAssetsFor:(nonnull NSArray<MCVectorLayerFeatureInfo *> *)featureInfos
                                                       layerIdentifier:(nonnull NSString *)layerIdentifier {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCustomAssetsFor(::djinni::List<::djinni_generated::VectorLayerFeatureInfo>::toCpp(featureInfos),
                                                                      ::djinni::String::toCpp(layerIdentifier));
        return ::djinni::List<::djinni_generated::Tiled2dMapVectorAssetInfo>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class Tiled2dMapVectorLayerSymbolDelegateInterface::ObjcProxy final
: public ::Tiled2dMapVectorLayerSymbolDelegateInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::Tiled2dMapVectorLayerSymbolDelegateInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::vector<::Tiled2dMapVectorAssetInfo> getCustomAssetsFor(const std::vector<::VectorLayerFeatureInfo> & c_featureInfos, const std::string & c_layerIdentifier) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getCustomAssetsFor:(::djinni::List<::djinni_generated::VectorLayerFeatureInfo>::fromCpp(c_featureInfos))
                                                                               layerIdentifier:(::djinni::String::fromCpp(c_layerIdentifier))];
            return ::djinni::List<::djinni_generated::Tiled2dMapVectorAssetInfo>::toCpp(objcpp_result_);
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto Tiled2dMapVectorLayerSymbolDelegateInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCTiled2dMapVectorLayerSymbolDelegateInterfaceCppProxy class]]) {
        return ((MCTiled2dMapVectorLayerSymbolDelegateInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Tiled2dMapVectorLayerSymbolDelegateInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCTiled2dMapVectorLayerSymbolDelegateInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
